import random

class SpeachGen():
    
    t = []
    
    # Universal Speech Template
    ust = (
        (
        "Коллеги,", "С другой стороны", "Равным образом", "Не следует однако забывать, что", 
        "Таким образом,", "Повседневная практика показывает, что",
        "Значимость этих проблем настолько очевидна, что", "Разнообразный и богатый опыт", 
        "Задача организации, в особенности же", "Идейные соображения высшего порядка, а так же",
        ),
        (
        "реализация намеченных плановых заданий", "рамки и место обучения кадров", 
        "постоянный количественный рост и сфера нашей активности", "сложившаяся структура организации",
        "новая модель организационной деятельности", "дальнейшее развитие различных форм деятельности",
        "постоянное информационно-пропагандистское обеспечение нашей деятельности", "укрепления и развития структуры",
        "консультация с широким активом", "начало повседневной работы по формированию позиции",
        ),
        (
        "играет важную роль в формировании", "требуют от нас анализа", "требуют определения и уточнения", 
        "способствует подготовке и реализации", "обеспечивает широкому кругу специалистов участие в формировании",
        "позволяет выполнить важные задания по разработке", "в значительной степени обусловливает создание",
        "позволяет оценить значение", "представляет собой интересный эксперимент проверки",
        "влечет за собой процесс внедрения и модернизации",
        ),
        (
        "существующих финансовых и административных условий", "дальнейшее направление развития", "системы массового участия",
        "позиций, занимаемых участниками в отношении поставленных задач", "новых предложений", "направлений прогрессивного развития",
        "системы обучения кадров, соответствующей насущным потребностям", "соответствующих условий активизации",
        "модели развития", "форм воздействия",
        ),
    )
    
    def __init__(self) -> None:
        for index, value in enumerate(self.ust):
            self.t.append(self._rnd(index))
    
    def run(self) -> str:
        t = []
        for index, value in enumerate(self.ust):
            t.append(self._rnd(index))
            while t[index] == self.t[index]:
                t[index] = self._rnd(index)
            self.t[index] = t[index]
            
        txt = ""
        for index, value in enumerate(self.ust):
            txt += f"{self.ust[index][t[index]]}"
            txt += f" " if index < (len(self.ust) - 1) else "."
        
        return txt
        
    def _rnd(self, i: int) -> int:
        if i > len(self.ust):
            raise Exception("Invalid value")
        return random.randint(0, len(self.ust[i]) - 1)
